import { GoogleGenAI, Type } from "@google/genai";
import type { ScanResult, ChatMessage } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const model = "gemini-2.5-flash";

const responseSchema = {
  type: Type.OBJECT,
  properties: {
    pestName: {
      type: Type.STRING,
      description: "Name of the pest or disease detected. 'None' if the plant is healthy.",
    },
    infectionLevel: {
      type: Type.NUMBER,
      description: "A numerical score from 0 (healthy) to 100 (heavily infected).",
    },
    recommendation: {
      type: Type.STRING,
      description: "A brief, actionable recommendation for the user. E.g., 'No action needed', 'Apply light organic pesticide', 'Activate sprinkler with fungicide'.",
    },
    reasoning: {
      type: Type.STRING,
      description: "A simple, one-sentence explanation for the detection, understandable by a non-expert.",
    },
  },
  required: ["pestName", "infectionLevel", "recommendation", "reasoning"],
};

export const analyzePlantImage = async (base64Image: string, mimeType: string): Promise<ScanResult> => {
  try {
    const imagePart = {
      inlineData: {
        data: base64Image,
        mimeType: mimeType,
      },
    };

    const textPart = {
      text: "Analyze this plant image for pests or diseases. Identify the pest, estimate the infection level from 0 to 100, provide a simple recommendation, and a brief reasoning. If the plant is healthy, indicate that. Respond in the requested JSON format.",
    };

    const response = await ai.models.generateContent({
      model: model,
      contents: { parts: [imagePart, textPart] },
      config: {
        responseMimeType: "application/json",
        responseSchema: responseSchema,
      },
    });

    const jsonText = response.text.trim();
    const parsedResult: ScanResult = JSON.parse(jsonText);
    
    // Clamp infection level to be safe
    parsedResult.infectionLevel = Math.max(0, Math.min(100, parsedResult.infectionLevel));

    return parsedResult;

  } catch (error) {
    console.error("Error analyzing image with Gemini API:", error);
    throw new Error("Failed to analyze the plant image. The AI model may be temporarily unavailable.");
  }
};

export const getChatbotResponse = async (prompt: string, language: string, history: ChatMessage[]): Promise<string> => {
  try {
    const chat = ai.chats.create({
      model: model,
      config: {
        systemInstruction: `You are AgriGuard, a friendly and helpful AI assistant for farmers and gardeners. Please provide concise and easy-to-understand advice. The user is communicating in ${language}. You must respond ONLY in ${language}.`,
      },
      history: history.map(msg => ({
        role: msg.role,
        parts: [{ text: msg.text }]
      }))
    });

    const response = await chat.sendMessage({ message: prompt });
    return response.text;

  } catch (error) {
    console.error("Error getting chatbot response from Gemini API:", error);
    throw new Error("The chatbot is currently unavailable. Please try again later.");
  }
};

export const generateAvatarImage = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: `A vibrant, digital art style avatar for a profile picture. The subject is: ${prompt}. The image should be square and suitable for a small icon.`,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/png',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/png;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the model.");
        }

    } catch (error) {
        console.error("Error generating avatar image with Gemini API:", error);
        throw new Error("Failed to generate avatar. The AI model may be temporarily unavailable.");
    }
};